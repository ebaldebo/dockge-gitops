// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cmdexecutor

import (
	"sync"
)

// Ensure, that CommandExecutorMock does implement CommandExecutor.
// If this is not the case, regenerate this file with moq.
var _ CommandExecutor = &CommandExecutorMock{}

// CommandExecutorMock is a mock implementation of CommandExecutor.
//
//	func TestSomethingThatUsesCommandExecutor(t *testing.T) {
//
//		// make and configure a mocked CommandExecutor
//		mockedCommandExecutor := &CommandExecutorMock{
//			ExecuteCommandFunc: func(name string, args ...string) ([]byte, error) {
//				panic("mock out the ExecuteCommand method")
//			},
//		}
//
//		// use mockedCommandExecutor in code that requires CommandExecutor
//		// and then make assertions.
//
//	}
type CommandExecutorMock struct {
	// ExecuteCommandFunc mocks the ExecuteCommand method.
	ExecuteCommandFunc func(name string, args ...string) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// ExecuteCommand holds details about calls to the ExecuteCommand method.
		ExecuteCommand []struct {
			// Name is the name argument value.
			Name string
			// Args is the args argument value.
			Args []string
		}
	}
	lockExecuteCommand sync.RWMutex
}

// ExecuteCommand calls ExecuteCommandFunc.
func (mock *CommandExecutorMock) ExecuteCommand(name string, args ...string) ([]byte, error) {
	if mock.ExecuteCommandFunc == nil {
		panic("CommandExecutorMock.ExecuteCommandFunc: method is nil but CommandExecutor.ExecuteCommand was just called")
	}
	callInfo := struct {
		Name string
		Args []string
	}{
		Name: name,
		Args: args,
	}
	mock.lockExecuteCommand.Lock()
	mock.calls.ExecuteCommand = append(mock.calls.ExecuteCommand, callInfo)
	mock.lockExecuteCommand.Unlock()
	return mock.ExecuteCommandFunc(name, args...)
}

// ExecuteCommandCalls gets all the calls that were made to ExecuteCommand.
// Check the length with:
//
//	len(mockedCommandExecutor.ExecuteCommandCalls())
func (mock *CommandExecutorMock) ExecuteCommandCalls() []struct {
	Name string
	Args []string
} {
	var calls []struct {
		Name string
		Args []string
	}
	mock.lockExecuteCommand.RLock()
	calls = mock.calls.ExecuteCommand
	mock.lockExecuteCommand.RUnlock()
	return calls
}
